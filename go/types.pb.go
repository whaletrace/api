// Read https://developers.google.com/protocol-buffers/docs/style

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.11.4
// source: types.proto

package types

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//*
// Represents information about a transaction that occured
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    string               `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`                         //ID(in a form of hash) of the trancasction, that can be used to look up the transaction
	From    *Entity              `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`                         // Sender information (empty in cas of issue token action)
	To      *Entity              `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`                             // Receiver information (empty in cas of redeem token action)
	Id      int32                `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`                            //for unique trx identification
	Time    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`                         // Time of the acceptance of the transaction into the blockchain
	Asset   string               `protobuf:"bytes,9,opt,name=asset,proto3" json:"asset,omitempty"`                       // Asset of the transaction (example:BTC,ETH,USDT)
	Size    float64              `protobuf:"fixed64,10,opt,name=size,proto3" json:"size,omitempty"`                      //Size(value) of the transaction in its native asset
	USDSize float64              `protobuf:"fixed64,11,opt,name=USD_size,json=USDSize,proto3" json:"USD_size,omitempty"` //Size(value) of the transaction is USD
	Token   *Token               `protobuf:"bytes,12,opt,name=token,proto3" json:"token,omitempty"`                      // Additional info about the transaction in case it was contract execution
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetFrom() *Entity {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *Transaction) GetTo() *Entity {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Transaction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Transaction) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Transaction) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *Transaction) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Transaction) GetUSDSize() float64 {
	if x != nil {
		return x.USDSize
	}
	return 0
}

func (x *Transaction) GetToken() *Token {
	if x != nil {
		return x.Token
	}
	return nil
}

//*
// Represents additional information about an entity thet receved/sent transaction
type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` //Address of the entity in the form of an hash
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`       //Name of the entity or Wallet in case of unknown entity
	Type    string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`       //Type of the entity (example: wallet,exchange,gambling)
	Url     string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`         //(optional) url of the entity webpage
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *Entity) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Entity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Entity) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Entity) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

//*
// Extends basic transaction data with information about token transaction
type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //Name of the token (example: HuobiToken)
	Chain  string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`   //Blockchain, on which the token has been tracker (example:ETH for ethereum blockchain)
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"` //Symbol used for the token on the blockchain (example: HT)
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"` //Action that has taken place, since with contracts we can track multiple actions (transfer|issue|redeem)
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Token) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Token) GetChain() string {
	if x != nil {
		return x.Chain
	}
	return ""
}

func (x *Token) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Token) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

//*
// Represents data of request for crypto transactions of some type(Asset) with additional filters
type CryptoTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`            //Asset name (example:BTC,ETH,USDT)
	From      *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`            // Start of the time-frame in which the interested transactions occured
	To        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                // End of the time-frame in which the interested transactions occured
	Count     int64                `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`         //Number of transaction that should be returned (max 100, default 50 )
	SizeLimit int64                `protobuf:"varint,5,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"` //lower USD size limit of the returned transactions (min and default according membership)
}

func (x *CryptoTransactionRequest) Reset() {
	*x = CryptoTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoTransactionRequest) ProtoMessage() {}

func (x *CryptoTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoTransactionRequest.ProtoReflect.Descriptor instead.
func (*CryptoTransactionRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *CryptoTransactionRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CryptoTransactionRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CryptoTransactionRequest) GetTo() *timestamp.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CryptoTransactionRequest) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CryptoTransactionRequest) GetSizeLimit() int64 {
	if x != nil {
		return x.SizeLimit
	}
	return 0
}

//*
// Represents data of request for crypto transactions of some type(Asset) with no additional filters
type CryptoSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` //Asset name (example:BTC,ETH,USDT)
	X         string `protobuf:"bytes,2,opt,name=_,proto3" json:"_,omitempty"`
	SizeLimit int64  `protobuf:"varint,5,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"` //lower USD size limit of the returned transactions (min and default according membership)
}

func (x *CryptoSubscribeRequest) Reset() {
	*x = CryptoSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoSubscribeRequest) ProtoMessage() {}

func (x *CryptoSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoSubscribeRequest.ProtoReflect.Descriptor instead.
func (*CryptoSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *CryptoSubscribeRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CryptoSubscribeRequest) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *CryptoSubscribeRequest) GetSizeLimit() int64 {
	if x != nil {
		return x.SizeLimit
	}
	return 0
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa,
	0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x1b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x17, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x55, 0x53, 0x44, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x55, 0x53, 0x44, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x5c, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x61, 0x0a, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbe, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2a, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x57, 0x0a,
	0x16, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x01, 0x5f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x00, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0xd6, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0f,
	0x54, 0x6f, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x19, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x14, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x19, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x40, 0x0a,
	0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_types_proto_goTypes = []interface{}{
	(*Transaction)(nil),              // 0: Transaction
	(*Entity)(nil),                   // 1: Entity
	(*Token)(nil),                    // 2: Token
	(*CryptoTransactionRequest)(nil), // 3: CryptoTransactionRequest
	(*CryptoSubscribeRequest)(nil),   // 4: CryptoSubscribeRequest
	(*timestamp.Timestamp)(nil),      // 5: google.protobuf.Timestamp
}
var file_types_proto_depIdxs = []int32{
	1, // 0: Transaction.from:type_name -> Entity
	1, // 1: Transaction.to:type_name -> Entity
	5, // 2: Transaction.time:type_name -> google.protobuf.Timestamp
	2, // 3: Transaction.token:type_name -> Token
	5, // 4: CryptoTransactionRequest.from:type_name -> google.protobuf.Timestamp
	5, // 5: CryptoTransactionRequest.to:type_name -> google.protobuf.Timestamp
	3, // 6: TransactionServer.TopTransactions:input_type -> CryptoTransactionRequest
	3, // 7: TransactionServer.HistoricTransactions:input_type -> CryptoTransactionRequest
	4, // 8: TransactionServer.SubscribeTransactions:input_type -> CryptoSubscribeRequest
	0, // 9: TransactionServer.TopTransactions:output_type -> Transaction
	0, // 10: TransactionServer.HistoricTransactions:output_type -> Transaction
	0, // 11: TransactionServer.SubscribeTransactions:output_type -> Transaction
	9, // [9:12] is the sub-list for method output_type
	6, // [6:9] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TransactionServerClient is the client API for TransactionServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServerClient interface {
	// Obtain top transaction from given time-frame of given asset as an rpc stream
	TopTransactions(ctx context.Context, in *CryptoTransactionRequest, opts ...grpc.CallOption) (TransactionServer_TopTransactionsClient, error)
	// Obtain historic transactions from given time-frame of given asset as an array
	HistoricTransactions(ctx context.Context, in *CryptoTransactionRequest, opts ...grpc.CallOption) (TransactionServer_HistoricTransactionsClient, error)
	//subscribe to the newest transactions of given asset
	SubscribeTransactions(ctx context.Context, in *CryptoSubscribeRequest, opts ...grpc.CallOption) (TransactionServer_SubscribeTransactionsClient, error)
}

type transactionServerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServerClient(cc grpc.ClientConnInterface) TransactionServerClient {
	return &transactionServerClient{cc}
}

func (c *transactionServerClient) TopTransactions(ctx context.Context, in *CryptoTransactionRequest, opts ...grpc.CallOption) (TransactionServer_TopTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionServer_serviceDesc.Streams[0], "/TransactionServer/TopTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServerTopTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionServer_TopTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type transactionServerTopTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServerTopTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServerClient) HistoricTransactions(ctx context.Context, in *CryptoTransactionRequest, opts ...grpc.CallOption) (TransactionServer_HistoricTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionServer_serviceDesc.Streams[1], "/TransactionServer/HistoricTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServerHistoricTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionServer_HistoricTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type transactionServerHistoricTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServerHistoricTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServerClient) SubscribeTransactions(ctx context.Context, in *CryptoSubscribeRequest, opts ...grpc.CallOption) (TransactionServer_SubscribeTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionServer_serviceDesc.Streams[2], "/TransactionServer/SubscribeTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServerSubscribeTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionServer_SubscribeTransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type transactionServerSubscribeTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServerSubscribeTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionServerServer is the server API for TransactionServer service.
type TransactionServerServer interface {
	// Obtain top transaction from given time-frame of given asset as an rpc stream
	TopTransactions(*CryptoTransactionRequest, TransactionServer_TopTransactionsServer) error
	// Obtain historic transactions from given time-frame of given asset as an array
	HistoricTransactions(*CryptoTransactionRequest, TransactionServer_HistoricTransactionsServer) error
	//subscribe to the newest transactions of given asset
	SubscribeTransactions(*CryptoSubscribeRequest, TransactionServer_SubscribeTransactionsServer) error
}

// UnimplementedTransactionServerServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServerServer struct {
}

func (*UnimplementedTransactionServerServer) TopTransactions(*CryptoTransactionRequest, TransactionServer_TopTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method TopTransactions not implemented")
}
func (*UnimplementedTransactionServerServer) HistoricTransactions(*CryptoTransactionRequest, TransactionServer_HistoricTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method HistoricTransactions not implemented")
}
func (*UnimplementedTransactionServerServer) SubscribeTransactions(*CryptoSubscribeRequest, TransactionServer_SubscribeTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactions not implemented")
}

func RegisterTransactionServerServer(s *grpc.Server, srv TransactionServerServer) {
	s.RegisterService(&_TransactionServer_serviceDesc, srv)
}

func _TransactionServer_TopTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CryptoTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServerServer).TopTransactions(m, &transactionServerTopTransactionsServer{stream})
}

type TransactionServer_TopTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type transactionServerTopTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServerTopTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionServer_HistoricTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CryptoTransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServerServer).HistoricTransactions(m, &transactionServerHistoricTransactionsServer{stream})
}

type TransactionServer_HistoricTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type transactionServerHistoricTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServerHistoricTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionServer_SubscribeTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CryptoSubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServerServer).SubscribeTransactions(m, &transactionServerSubscribeTransactionsServer{stream})
}

type TransactionServer_SubscribeTransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type transactionServerSubscribeTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServerSubscribeTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

var _TransactionServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TransactionServer",
	HandlerType: (*TransactionServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TopTransactions",
			Handler:       _TransactionServer_TopTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "HistoricTransactions",
			Handler:       _TransactionServer_HistoricTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTransactions",
			Handler:       _TransactionServer_SubscribeTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "types.proto",
}
